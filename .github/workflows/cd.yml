---
    name: 🚀 CD - Continuous Deployment
    
    "on":
      workflow_run:
        workflows: ["🔍 CI - Continuous Integration"]
        types:
          - completed
        branches: [Firman]
      push:
        branches: [Firman]
        paths:
          - 'App/**'
          - 'Model/**'
          - 'requirements.txt'
          - 'README_SPACES.md'
    
    env:
      PYTHON_VERSION: '3.11'
      HF_SPACE_NAME: 'Tugas1MLOps'
    
    jobs:
      deploy:
        name: 🚀 Deploy to Hugging Face Spaces
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
        steps:
          - name: 📥 Checkout Code
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
    
          - name: 🐍 Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: ${{ env.PYTHON_VERSION }}
    
          - name: 📦 Install Dependencies
            run: |
              python -m pip install --upgrade pip
              pip install huggingface_hub
              pip install -r requirements.txt
    
          - name: 🔍 Validate Model Files
            run: |
              echo "🔍 Validating model files before deployment..."
              if [ ! -f "Model/personality_classifier.skops" ]; then
                echo "❌ Model file not found! Running training..."
                python train.py
              fi
              if [ ! -f "Model/label_encoder.skops" ]; then
                echo "❌ Label encoder not found!"
                exit 1
              fi
              if [ ! -f "Model/feature_names.skops" ]; then
                echo "❌ Feature names not found!"
                exit 1
              fi
              echo "✅ All model files validated successfully"
    
          - name: 🧪 Test App Locally
            run: |
              echo "🧪 Testing Gradio app locally..."
              timeout 30s python App/app.py || echo "App test completed"
    
          - name: 📋 Prepare Deployment Files
            run: |
              echo "📋 Preparing files for Hugging Face Spaces..."
              cp App/app.py app.py
              if [ ! -f "README.md" ]; then
                cp README_SPACES.md README.md
              fi
              echo "✅ Files prepared for deployment:"
              ls -la app.py
              ls -la requirements.txt
              ls -la Model/
    
          - name: 🔑 Configure Git
            run: |
              git config --global user.email "github-actions@github.com"
              git config --global user.name "GitHub Actions Bot"
    
          - name: 🚀 Deploy to Hugging Face Spaces
            env:
              HF_TOKEN: ${{ secrets.HF_TOKEN }}
            run: |
              echo "🚀 Starting deployment to Hugging Face Spaces..."
              if [ -z "$HF_TOKEN" ]; then
                echo "⚠️ HF_TOKEN not found in secrets"
                echo "🔧 Manual deployment required"
                exit 0
              fi
              python -c "
              from huggingface_hub import HfApi, login
              import os
              login(token=os.environ['HF_TOKEN'])
              print('✅ Successfully logged in to Hugging Face')
              "
              cat > deploy_script.py << 'EOF'
              from huggingface_hub import HfApi
              import os
              import sys
              
              def main():
                  api = HfApi()
                  token = os.environ.get('HF_TOKEN')
                  space_name = os.environ.get('HF_SPACE_NAME')
                  
                  if not token:
                      print('❌ HF_TOKEN not found')
                      sys.exit(1)
                      
                  try:
                      space_info = api.space_info(space_name, token=token)
                      print(f'✅ Space {space_name} exists, updating...')
                      
                      api.upload_file(
                          path_or_fileobj='app.py',
                          path_in_repo='app.py',
                          repo_id=space_name,
                          repo_type='space',
                          token=token
                      )
                      
                      api.upload_file(
                          path_or_fileobj='requirements.txt',
                          path_in_repo='requirements.txt',
                          repo_id=space_name,
                          repo_type='space',
                          token=token
                      )
                      
                      api.upload_folder(
                          folder_path='Model/',
                          path_in_repo='Model',
                          repo_id=space_name,
                          repo_type='space',
                          token=token
                      )
                      
                      print(f'✅ Successfully updated Space: {space_name}')
                      
                  except Exception as e:
                      print(f'⚠️ Space not found: {e}')
                      print(f'🔧 Creating new space...')
                      
                      try:
                          api.create_repo(
                              repo_id=space_name,
                              repo_type='space',
                              space_sdk='gradio',
                              private=False,
                              token=token
                          )
                          
                          api.upload_file(
                              path_or_fileobj='app.py',
                              path_in_repo='app.py',
                              repo_id=space_name,
                              repo_type='space',
                              token=token
                          )
                          
                          api.upload_file(
                              path_or_fileobj='requirements.txt',
                              path_in_repo='requirements.txt',
                              repo_id=space_name,
                              repo_type='space',
                              token=token
                          )
                          
                          api.upload_folder(
                              folder_path='Model/',
                              path_in_repo='Model',
                              repo_id=space_name,
                              repo_type='space',
                              token=token
                          )
                          
                          print(f'✅ Successfully created Space: {space_name}')
                          
                      except Exception as create_error:
                          print(f'❌ Failed to create space: {create_error}')
                          sys.exit(1)
              
              if __name__ == "__main__":
                  main()
              EOF
              python deploy_script.py
    
          - name: 📊 Deployment Summary
            run: |
              echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**🎯 Target:** Hugging Face Spaces" >> $GITHUB_STEP_SUMMARY
              echo "**📦 Space Name:** ${{ env.HF_SPACE_NAME }}" >> $GITHUB_STEP_SUMMARY
              echo "**🌿 Branch:** Firman" >> $GITHUB_STEP_SUMMARY
              echo "**⏰ Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📋 Deployed Files:" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ app.py (Gradio application)" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ requirements.txt (Dependencies)" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Model/personality_classifier.skops" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Model/label_encoder.skops" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Model/feature_names.skops" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔗 Access Your App:" >> $GITHUB_STEP_SUMMARY
              space_url="https://huggingface.co/spaces/${{ github.repository_owner }}/${{ env.HF_SPACE_NAME }}"
              echo "**🌐 URL:** $space_url" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "---" >> $GITHUB_STEP_SUMMARY
              echo "*🤖 Deployed automatically by GitHub Actions*" >> $GITHUB_STEP_SUMMARY
    
      notify:
        name: 📢 Notify Deployment Status
        runs-on: ubuntu-latest
        needs: deploy
        if: always()
    
        steps:
          - name: 📢 Deployment Notification
            run: |
              if [ "${{ needs.deploy.result }}" == "success" ]; then
                echo "✅ Deployment to Hugging Face Spaces completed successfully!"
                space_url="https://huggingface.co/spaces/${{ github.repository_owner }}/${{ env.HF_SPACE_NAME }}"
                echo "🌐 Your app should be available at: $space_url"
              else
                echo "❌ Deployment failed. Please check the logs above."
                echo "🔧 Manual deployment may be required."
              fi
    